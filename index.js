const TelegramApi = require("node-telegram-bot-api");
const token = "7238330479:AAFTdGKnyCkqxhOihxNi4nh27JR15EXm_RI";
const bot = new TelegramApi(token, { polling: true });

const {MongoClient} = require('mongodb')
const client = new MongoClient('mongodb+srv://shaualievns:ayau3003@telegrambot.drz3zlo.mongodb.net/?retryWrites=true&w=majority&appName=telegrambot')

let usersCollection;

const start = async () => {
    try {
        await client.connect()
        console.log('Connected to MongoDB')
        const db = client.db('telegrambot')
        usersCollection = db.collection('users')
    } catch (e) {
        console.log(e)
    }
}

start()


bot.on('message', async msg => {
    const chatId = msg.chat.id;
    const username = msg.chat.username;
    const text = msg.text;

    try {
        if (text.startsWith('/start')) {
            const referralId = text.split(' ')[1]; // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            console.log(`Referral ID: ${referralId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            try {

                let user = await usersCollection.findOne({ chatId });
                if (!user) {
                    // –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö 
                    await usersCollection.insertOne({ 
                        chatId, 
                        username, 
                        count: 0, 
                        lastClick: null, 
                        referralCount: 0,
                        referredBy: referralId || null, 
                        referrals: 0 
                    });
                    // –ü—Ä–∏–≤–µ—Ç—Å–≤—Ç–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã start 
                    await bot.sendMessage(chatId, `
                        üê≥ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ BTC —à–ª—é–∑–µ! üöÄ 
            
- –ü–æ–ª—É—á–∞–π BTC –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
- –ë–æ—Ç –ù–ï —Ç—Ä–µ–±—É–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π
- –í—ã–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
                    `);

                    // –ö–æ–¥ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                    if (referralId) {
                        await usersCollection.updateOne(
                            { chatId: parseInt(referralId) },
                            { $inc: { referrals: 1, count: 0.000025, referralCount: 0.000025 } }
                        );

                        await bot.sendMessage(parseInt(referralId), `–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: ${username} (${chatId}). –í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 0.000025 BTC.`);
                    }

                } else {
                    // –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫ –±–æ—Ç—É 
                    await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${username}!`);
                }
            } catch (err) {
                console.error(err);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
            }
        }
        // –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é 
        else if (msg.text == '/menu') {
            await bot.sendMessage(msg.chat.id, `–ú–µ–Ω—é –±–æ—Ç–∞`, {
                reply_markup: {
                    keyboard: [
                        ['üëõ –ö–æ—à–µ–ª–µ–∫', 'üâë BitCoin'],
                        ['üìô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
                    ],
                    resize_keyboard: true,
                }
            })
        }
        // –ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 
        else if (msg.text == 'üìô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
            await bot.sendMessage(msg.chat.id, `
                üìô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

‚è≥ –†–∞–±–æ—Ç–∞–µ–º: 243 –¥–Ω–µ–π
üê≥ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 345509
‚ù§Ô∏è –ù–æ–≤–æ—Å—Ç–∏: <a href="https://t.me/+AtLRIcZH8zpjNTUy">–°—Å—ã–ª–∫–∞</a>
            `, {parse_mode: 'HTML'})
        }
        // –ö–æ–º–∞–Ω–¥–∞ BitCoin
        else if (msg.text == 'üâë BitCoin') {
            try {
                const user = await usersCollection.findOne({ chatId });
            
                if (user) {

                    const currentTime = new Date();
                    const twelveHours = 12 * 60 * 60 * 1000; 

                    if (user.lastClick && (currentTime - user.lastClick < twelveHours)) {
                        const remainingTime = twelveHours - (currentTime - user.lastClick);
                        const hours = Math.floor(remainingTime / (60 * 60 * 1000));
                        const minutes = Math.floor((remainingTime % (60 * 60 * 1000)) / (60 * 1000));
                        const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);

                        await bot.sendMessage(chatId, `
                            ‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ BTC –ø—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ ${hours}:${minutes}:${seconds} —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë!
                        `);

                    } else {
                        await usersCollection.updateOne(
                            { chatId },
                            { 
                                $inc: { count: 0.000049 },
                                $set: { lastClick: new Date() }
                            },
                        );

                    await bot.sendMessage(msg.chat.id, `–í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${user.count + 0.000049} BTC`);
                  }
                } else {
                    await bot.sendMessage(msg.chat.id,'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
                } catch (err) {
                    console.error(err);
                    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
                }
        }
        else if (msg.text == 'üëõ –ö–æ—à–µ–ª–µ–∫') {
            try {
                const user = await usersCollection.findOne({ chatId });
            
                if (user) {
                    const message = await bot.sendMessage(msg.chat.id, `
                        üëõ –ö–æ—à–µ–ª–µ–∫
        
üê≥ ${username}
üÜî <code>${chatId}</code>

üâë BTC ${user.count}    
                    `, { 
                        parse_mode: 'HTML', 
                        disable_web_page_preview: true,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'show_referrals' }],
                                [{ text: 'üí∏ –í—ã–≤–æ–¥', callback_data: 'request_withdrawal' }]
                            ]
                        }
                       })

                       const messageId = message.message_id;
                       console.log('Message ID:', messageId);
                       await usersCollection.updateOne(
                            { chatId },
                            { $set: { walletMessageId: messageId } }
                        );
                } else {
                  await bot.sendMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
              } catch (err) {
                console.error(err);
                await bot.sendMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.')
              }
        } else {
            await bot.sendMessage(msg.chat.id, msg.text);
        }
    } 
    catch(error) {
        console.log(error)
    }
})

bot.on('callback_query', async query => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const messageId = query.message.message_id;

    if (data === 'show_referrals') {
        try {
            const user = await usersCollection.findOne({ chatId });

            if (user && user.walletMessageId) {
                await bot.deleteMessage(chatId, user.walletMessageId);
            }
            if (user) {
                const referralLink = `https://t.me/lockbitcoinbot?start=${chatId}`;
                await bot.sendMessage(chatId, `
                    üë• –†–µ—Ñ–µ—Ä–∞–ª—ã

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ 0,000025 BTC

üâë –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ ${user.referralCount} BTC
üê≥ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ ${user.referrals}
 
üîó –°—Å—ã–ª–∫–∞: ${referralLink}
                `);
            } else {
                await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
        } catch (err) {
            console.error(err);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
        }
    } else if (data === 'request_withdrawal') { // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí∏ –í—ã–≤–æ–¥"
        try {
            const user = await usersCollection.findOne({ chatId });

            if (user && user.walletMessageId) {
                await bot.deleteMessage(chatId, user.walletMessageId);
            }

            const minWithdrawalAmount = 0.00125;
            if (user) {
                const totalBalance = user.count + user.referralCount;
                if (totalBalance < minWithdrawalAmount) {
                    await bot.sendMessage(chatId, `
‚ö†Ô∏è –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è –≤—ã–≤–æ–¥–∞.

üâë –ú–∏–Ω–∏–º—É–º –∫ –≤—ã–≤–æ–¥—É 0,00125 BTC
                    `);
                } else {
                    await bot.sendMessage(chatId, `
üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥

–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.count} BTC
–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: ${user.referralCount} BTC

–ß—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>/withdraw –°–£–ú–ú–ê –ê–î–†–ï–°</code>
                    `, { parse_mode: 'HTML' });
                }
            } else {
                await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
        } catch (err) {
            console.error(err);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
        }
    }
});
